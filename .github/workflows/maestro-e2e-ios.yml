name: Maestro E2E Tests (iOS)

on:
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 0 * * 0" # At 00:00 on Sunday

jobs:
  e2e-ios:
    name: Run E2E Tests on iOS
    runs-on: macos-latest
    steps:
      - name: 🏗 Setup repository
        uses: actions/checkout@v3

      - name: 🏗 Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗 Setup EAS
        run: npm install -g eas-cli

      - name: 🔧 Setup iOS simulator
        run: |
          xcrun simctl list
          DEVICE_ID=$(xcrun simctl create "Test Device" "iPhone 14")
          xcrun simctl boot "$DEVICE_ID"
          echo "DEVICE_ID=$DEVICE_ID" >> $GITHUB_ENV

      - name: 🏗 Build iOS app with EAS
        run: |
          eas build --platform ios --profile development-sim --local --non-interactive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: 📱 Install app on simulator
        run: |
          APP_PATH="build/Build/Products/Debug-iphonesimulator/BibleMemo.app"
          if [ ! -d "$APP_PATH" ]; then
            echo "❌ App bundle not found at $APP_PATH"
            exit 1
          fi
          xcrun simctl install "$DEVICE_ID" "$APP_PATH"
          echo "✅ App installed successfully"
          xcrun simctl get_app_container "$DEVICE_ID" com.yourcompany.BibleMemo || echo "App container check failed, continuing anyway"

      - name: 🏗 Install Maestro CLI
        run: |
          curl -Ls "https://get.maestro.mobile.dev" | bash
          export PATH="$PATH":"$HOME/.maestro/bin"
          echo "$HOME/.maestro/bin" >> $GITHUB_PATH
          maestro --version

      - name: 🧪 Run Maestro tests
        run: |
          export APP_ENV=test
          export GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          export IOS_DEVICE_ID=${{ env.DEVICE_ID }}

          cd ./maestro
          maestro test .

      # Add a step to capture screenshots if tests fail
      - name: 📷 Capture screenshots on failure
        if: failure()
        run: |
          xcrun simctl io ${{ env.DEVICE_ID }} screenshot ./failure-screenshot.png

      # Upload screenshots as artifacts
      - name: 📤 Upload failure screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: failure-screenshots
          path: ./*.png
